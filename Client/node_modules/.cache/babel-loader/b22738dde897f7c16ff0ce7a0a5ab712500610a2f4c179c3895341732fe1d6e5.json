{"ast":null,"code":"import { getToken } from \"../Service/Service\";\nimport apiEndPoints from \"./apiEndPoints\";\nexport const AppConfig = {\n  baseURL: \"https://\",\n  headers: {\n    \"Content-Type\": \"application/json; charset=utf-8\",\n    Accept: \"application/json\",\n    \"Accept-Language\": \"en\"\n  }\n};\nexport const AuthPost = async (url, data) => {\n  const token = getToken();\n  try {\n    const response = await fetch(AppConfig.baseURL + url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Accept': 'application/json',\n        'Accept-Language': 'en',\n        'Token': token\n      },\n      body: JSON.stringify(data)\n    });\n    const jsonData = await response.json();\n    return jsonData;\n  } catch (error) {\n    return error;\n  }\n};\n_c = AuthPost;\nexport const GetApi = async url => {\n  const token = getToken();\n  const headers = {\n    \"Content-Type\": \"application/json; charset=utf-8\",\n    Accept: \"application/json\",\n    \"Accept-Language\": \"en\",\n    Token: token\n  };\n  try {\n    const response = await fetch(AppConfig.baseURL + url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n_c2 = GetApi;\nexport const loginAdmin = async _ref => {\n  let {\n    username,\n    password\n  } = _ref;\n  try {\n    const response = await fetch((AppConfig === null || AppConfig === void 0 ? void 0 : AppConfig.baseURL) + (apiEndPoints === null || apiEndPoints === void 0 ? void 0 : apiEndPoints.Login), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (response) {\n      // Login successful, handle response\n      const data = await response.json();\n      console.log(data); // example response handling\n    } else {\n      // Login failed, handle error\n      throw new Error('Login failed');\n    }\n  } catch (error) {\n    // Handle network or server error\n    console.error(error);\n  }\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthPost\");\n$RefreshReg$(_c2, \"GetApi\");","map":{"version":3,"names":["getToken","apiEndPoints","AppConfig","baseURL","headers","Accept","AuthPost","url","data","token","response","fetch","method","body","JSON","stringify","jsonData","json","error","_c","GetApi","Token","ok","Error","console","_c2","loginAdmin","_ref","username","password","Login","log","$RefreshReg$"],"sources":["/home/abc/Documents/ideal/Admin-dashboard-typescritp/src/App/apiConfig/apiConfig.ts"],"sourcesContent":["import { getToken } from \"../Service/Service\";\nimport apiEndPoints from \"./apiEndPoints\";\n\n\nexport const AppConfig = {\n  baseURL: \"https://\",\n  headers: {\n    \"Content-Type\": \"application/json; charset=utf-8\",\n    Accept: \"application/json\",\n    \"Accept-Language\": \"en\",\n  },\n};\nexport const AuthPost = async (url: string, data: any) => {\n  const token: any = getToken();\n  try {\n    const response = await fetch(AppConfig.baseURL + url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Accept': 'application/json',\n        'Accept-Language': 'en',\n        'Token': token,\n      },\n      body: JSON.stringify(data),\n    });\n    const jsonData = await response.json();\n    return jsonData;\n  } catch (error) {\n    return error;\n  }\n};\n\n\nexport const GetApi = async (url: string) => {\n  const token: any = getToken();\n  const headers = {\n    \"Content-Type\": \"application/json; charset=utf-8\",\n    Accept: \"application/json\",\n    \"Accept-Language\": \"en\",\n    Token: token,\n  };\n  try {\n    const response = await fetch(AppConfig.baseURL + url, {\n      headers,\n    });\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n\nexport const loginAdmin = async ({ username, password }:any) => {\n   try {\n    const response = await fetch(AppConfig?.baseURL + apiEndPoints?.Login, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ username, password })\n    });\n\n    if (response) {\n      // Login successful, handle response\n      const data = await response.json();\n      console.log(data); // example response handling\n    } else {\n      // Login failed, handle error\n      throw new Error('Login failed');\n    }\n  } catch (error) {\n    // Handle network or server error\n    console.error(error);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}